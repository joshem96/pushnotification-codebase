{"ast":null,"code":"import { globalInfo } from '../global_Info.js';\n\n//add classList .disabled-btn\nfunction disableBtn(e) {\n  e.target.classList.add('disabled-btn');\n}\n\n//remove classList .disabled-btn\nfunction enableBtn(e) {\n  e.target.classList.remove('disabled-btn');\n}\n\n//***** \n// ALL FUNCTIONS RELATED TO DISABLING ENABLING BTNS\n\n//check if push is there\n\n//check if push available, if so run handBtnAbility (function that after 3 seconds..)\nfunction triggerHandleBtnAbility() {\n  debugger;\n  //check that the push/globalInfo and API has been configured\n  var checkForExitBtn = setInterval(() => {\n    debugger;\n    console.log('checking if API and pussh is configured');\n    if (globalInfo.firstCallHasBeenMade === true && window.JF /*&& globalInfo.submissionResponses != ''*/) {\n      debugger;\n      clearInterval(checkForExitBtn);\n      //handleBtnAbility();\n    }\n  }, 200);\n}\n\n//BELOW CODE CURRENTLY REDUNDANT\n//***************************************************/\n\nvar checkSeenNotificationsInterval = '';\nfunction handleBtnAbility() {\n  debugger;\n  //if there are responses\n  //TO DO: fix this part\n  if (globalInfo.submissionResponses.length > 1) {\n    // checkSeenNotificationsInterval = setInterval(() => {\n\n    // }, 200);\n    console.log('response greater than 1');\n    handleNoNotificationsRemainding(true);\n  }\n  //if there are no responses,\n  else if (globalInfo.submissionResponses.length < 1 || globalInfo.submissionResponses == '') {\n    handleNoNotificationsRemainding(false);\n  }\n}\n\n// 1. when no more notifcations are avaialble\nvar timerToCheckIfNoNotifications = '';\nfunction handleNoNotificationsRemainding(responseType) {\n  debugger;\n  //false = no responses remainding\n  //true = responses remainding\n\n  //if no more notifcations, enable \"top searching\" button\n  //to enable the user to stop the API from searching for a notification\n  if (responseType === false) {\n    //stop search enabled\n    globalInfo.buttonStop.classList.remove('disabled-btn');\n    console.log(globalInfo.buttonStop);\n  }\n\n  //if response == true and and push is hidden?\n}\n\n//********************************************************** */\n\n//when popup is containing the last notifications\n// handleLastNotification(){\n//     //\n// }\n\n// 1.\n//if their are responses\n//setinterval to check for...\n//when responseArrayIndex is one less than submissionResponses (because latter doesnt count from 0)\n//add event listener to exit button which runs handleNoNotificationsRemainding(e)\n//said event listener has remove event listener for when its clicked\n//if no responses\n//handleNoNotificationsRemainding(e) //which enables stops button\n\n// - 'start search' clicked !DONE!\n//     - 'start search' btn disabled !DONE!\n// - check if push aviable !DONE!\n// - x clicked (event listener for x)\n//    1. - after 3 seconds ie: no more pushes to be shown\n//         - if push.style.visisibility == hidden \n//             - \"stop search btn\" enabled\n//                 - if \"stop search btn\" clicked\n//                     - disable stop search\n//                     - enable start search\n//             - clear this timeout\n//             - add string 'no new messages' to push placeholder\n\n// - 2. when the exit button is clicked and 3 second code starts\n// - if the pop up comes back, destroy the 3 second code\n//     - setinterval of 100ms checking if visisibility of popup\n//     - if its visisble, destroy 3 second code\n//     - otherwise clear this interval once the 3 seconds timeout code has been ran\n\n// 1.\n//if their are responses\n//setinterval to check for...\n//when responseArrayIndex is one less than submissionResponses (because latter doesnt count from 0)\n//add event listener to exit button which runs handleNoNotificationsRemainding(e)\n//said event listener has remove event listener for when its clicked\n//if no responses\n//handleNoNotificationsRemainding(e) //which enables stops button\n\n// 2. SHOULDNT NEED\n//if globalInfo submission responses and globalArrayIndex are default\n//handleNoNotificationsRemainding()\n//TODO: note:handleyes will keep running\n//otherwise be on standby to be destroyed by handleYesNotificationsActive \n//NOTE:\n//need code to handle if a notification comes in while its searching\n\nexport { disableBtn, enableBtn, triggerHandleBtnAbility };","map":{"version":3,"names":["globalInfo","disableBtn","e","target","classList","add","enableBtn","remove","triggerHandleBtnAbility","checkForExitBtn","setInterval","console","log","firstCallHasBeenMade","window","JF","clearInterval","checkSeenNotificationsInterval","handleBtnAbility","submissionResponses","length","handleNoNotificationsRemainding","timerToCheckIfNoNotifications","responseType","buttonStop"],"sources":["C:/Users/Josh/Documents/Code/push-ui-v1/my-app/src/designed_ui/apiStatus/functions.js"],"sourcesContent":["import {globalInfo} from '../global_Info.js';\r\n\r\n//add classList .disabled-btn\r\nfunction disableBtn(e){\r\n    e.target.classList.add('disabled-btn');\r\n}\r\n\r\n//remove classList .disabled-btn\r\nfunction enableBtn(e){\r\n    e.target.classList.remove('disabled-btn');\r\n}\r\n\r\n//***** \r\n// ALL FUNCTIONS RELATED TO DISABLING ENABLING BTNS\r\n\r\n//check if push is there\r\n\r\n//check if push available, if so run handBtnAbility (function that after 3 seconds..)\r\nfunction triggerHandleBtnAbility(){\r\n    debugger;\r\n    //check that the push/globalInfo and API has been configured\r\n    var checkForExitBtn = setInterval(() => {     \r\n        debugger;       \r\n        console.log('checking if API and pussh is configured');\r\n        if(globalInfo.firstCallHasBeenMade === true && window.JF /*&& globalInfo.submissionResponses != ''*/){\r\n            \r\n            debugger;\r\n\r\n            clearInterval(checkForExitBtn);\r\n            //handleBtnAbility();\r\n        }\r\n    }, 200);\r\n}\r\n\r\n//BELOW CODE CURRENTLY REDUNDANT\r\n//***************************************************/\r\n\r\nvar checkSeenNotificationsInterval = '';\r\nfunction handleBtnAbility(){\r\ndebugger;\r\n    //if there are responses\r\n    //TO DO: fix this part\r\n    if(globalInfo.submissionResponses.length > 1){\r\n        // checkSeenNotificationsInterval = setInterval(() => {\r\n            \r\n        // }, 200);\r\n        console.log('response greater than 1');\r\n        handleNoNotificationsRemainding(true);\r\n    }\r\n    //if there are no responses,\r\n    else if(globalInfo.submissionResponses.length < 1 || globalInfo.submissionResponses == '' ){\r\n        handleNoNotificationsRemainding(false);\r\n    }\r\n\r\n}\r\n\r\n// 1. when no more notifcations are avaialble\r\nvar timerToCheckIfNoNotifications = '';\r\nfunction handleNoNotificationsRemainding(responseType){\r\n    debugger;\r\n    //false = no responses remainding\r\n    //true = responses remainding\r\n\r\n    //if no more notifcations, enable \"top searching\" button\r\n        //to enable the user to stop the API from searching for a notification\r\n    if(responseType === false){\r\n        //stop search enabled\r\n        globalInfo.buttonStop.classList.remove('disabled-btn');\r\n        console.log(globalInfo.buttonStop);\r\n    }\r\n\r\n    //if response == true and and push is hidden?\r\n}\r\n\r\n\r\n//********************************************************** */\r\n\r\n//when popup is containing the last notifications\r\n// handleLastNotification(){\r\n//     //\r\n// }\r\n\r\n\r\n// 1.\r\n//if their are responses\r\n    //setinterval to check for...\r\n    //when responseArrayIndex is one less than submissionResponses (because latter doesnt count from 0)\r\n        //add event listener to exit button which runs handleNoNotificationsRemainding(e)\r\n        //said event listener has remove event listener for when its clicked\r\n//if no responses\r\n    //handleNoNotificationsRemainding(e) //which enables stops button\r\n\r\n\r\n// - 'start search' clicked !DONE!\r\n//     - 'start search' btn disabled !DONE!\r\n// - check if push aviable !DONE!\r\n// - x clicked (event listener for x)\r\n//    1. - after 3 seconds ie: no more pushes to be shown\r\n//         - if push.style.visisibility == hidden \r\n//             - \"stop search btn\" enabled\r\n//                 - if \"stop search btn\" clicked\r\n//                     - disable stop search\r\n//                     - enable start search\r\n//             - clear this timeout\r\n//             - add string 'no new messages' to push placeholder\r\n            \r\n\r\n// - 2. when the exit button is clicked and 3 second code starts\r\n// - if the pop up comes back, destroy the 3 second code\r\n//     - setinterval of 100ms checking if visisibility of popup\r\n//     - if its visisble, destroy 3 second code\r\n//     - otherwise clear this interval once the 3 seconds timeout code has been ran\r\n\r\n// 1.\r\n//if their are responses\r\n    //setinterval to check for...\r\n    //when responseArrayIndex is one less than submissionResponses (because latter doesnt count from 0)\r\n        //add event listener to exit button which runs handleNoNotificationsRemainding(e)\r\n        //said event listener has remove event listener for when its clicked\r\n//if no responses\r\n    //handleNoNotificationsRemainding(e) //which enables stops button\r\n\r\n// 2. SHOULDNT NEED\r\n//if globalInfo submission responses and globalArrayIndex are default\r\n    //handleNoNotificationsRemainding()\r\n    //TODO: note:handleyes will keep running\r\n//otherwise be on standby to be destroyed by handleYesNotificationsActive \r\n//NOTE:\r\n//need code to handle if a notification comes in while its searching\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport{disableBtn,enableBtn,triggerHandleBtnAbility}"],"mappings":"AAAA,SAAQA,UAAU,QAAO,mBAAmB;;AAE5C;AACA,SAASC,UAAU,CAACC,CAAC,EAAC;EAClBA,CAAC,CAACC,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;AAC1C;;AAEA;AACA,SAASC,SAAS,CAACJ,CAAC,EAAC;EACjBA,CAAC,CAACC,MAAM,CAACC,SAAS,CAACG,MAAM,CAAC,cAAc,CAAC;AAC7C;;AAEA;AACA;;AAEA;;AAEA;AACA,SAASC,uBAAuB,GAAE;EAC9B;EACA;EACA,IAAIC,eAAe,GAAGC,WAAW,CAAC,MAAM;IACpC;IACAC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtD,IAAGZ,UAAU,CAACa,oBAAoB,KAAK,IAAI,IAAIC,MAAM,CAACC,EAAE,CAAC,6CAA4C;MAEjG;MAEAC,aAAa,CAACP,eAAe,CAAC;MAC9B;IACJ;EACJ,CAAC,EAAE,GAAG,CAAC;AACX;;AAEA;AACA;;AAEA,IAAIQ,8BAA8B,GAAG,EAAE;AACvC,SAASC,gBAAgB,GAAE;EAC3B;EACI;EACA;EACA,IAAGlB,UAAU,CAACmB,mBAAmB,CAACC,MAAM,GAAG,CAAC,EAAC;IACzC;;IAEA;IACAT,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCS,+BAA+B,CAAC,IAAI,CAAC;EACzC;EACA;EAAA,KACK,IAAGrB,UAAU,CAACmB,mBAAmB,CAACC,MAAM,GAAG,CAAC,IAAIpB,UAAU,CAACmB,mBAAmB,IAAI,EAAE,EAAE;IACvFE,+BAA+B,CAAC,KAAK,CAAC;EAC1C;AAEJ;;AAEA;AACA,IAAIC,6BAA6B,GAAG,EAAE;AACtC,SAASD,+BAA+B,CAACE,YAAY,EAAC;EAClD;EACA;EACA;;EAEA;EACI;EACJ,IAAGA,YAAY,KAAK,KAAK,EAAC;IACtB;IACAvB,UAAU,CAACwB,UAAU,CAACpB,SAAS,CAACG,MAAM,CAAC,cAAc,CAAC;IACtDI,OAAO,CAACC,GAAG,CAACZ,UAAU,CAACwB,UAAU,CAAC;EACtC;;EAEA;AACJ;;AAGA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACI;AACA;AACI;AACA;AACR;AACI;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACI;AACA;AACI;AACA;AACR;AACI;;AAEJ;AACA;AACI;AACA;AACJ;AACA;AACA;;AAgBA,SAAOvB,UAAU,EAACK,SAAS,EAACE,uBAAuB"},"metadata":{},"sourceType":"module"}
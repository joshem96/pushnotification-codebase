{"ast":null,"code":"import{globalInfo}from'../global_Info.js';import{APILogBuffer,fetchSubmissionResponses}from'../global_functions';function deleteAllPushSubmissions(){//DELETE ALL SUBMISSIONS\nfunction deleteSubmissionResponses(){//forEach form submission response, delete the data\n//after this has been run, it will be as if a new form was created (no data)\n//forEach over all form responses (push notifcations)\nfor(var i=0;i<globalInfo.submissionResponses.length;i++){//via the id, for each response delete the response submission\nwindow.JF.deleteSubmission(globalInfo.submissionResponses[i].id,function(response){/**\r\n                 successful response including a text message\r\n                .\r\n                */});}}//execute delete script (ensure API ok and submissions fetched uptodate)\nfunction executeDeleteSubmissionResponses(){//when API has loaded (window.JF != ''), run the following scripts to execute the deletion of all form submissions\nvar whenAPILoaded='';whenAPILoaded=setInterval(function(){if(window.JF!=''){//fetch submission responses\nfetchSubmissionResponses();//when API has retieved submission responses, run delete submission responses function\nvar checkSubmissionsResponse='';checkSubmissionsResponse=setInterval(function(){if(globalInfo.submissionResponses!=''){deleteSubmissionResponses();clearInterval(checkSubmissionsResponse);}},100);}clearInterval(whenAPILoaded);//stop checking if API has loaded\nAPILogBuffer('all submissions have been deleted.');//populate API status\n},500);}executeDeleteSubmissionResponses();}export{deleteAllPushSubmissions};","map":{"version":3,"names":["globalInfo","APILogBuffer","fetchSubmissionResponses","deleteAllPushSubmissions","deleteSubmissionResponses","i","submissionResponses","length","window","JF","deleteSubmission","id","response","executeDeleteSubmissionResponses","whenAPILoaded","setInterval","checkSubmissionsResponse","clearInterval"],"sources":["C:/Users/Josh/Documents/Code/push-ui-v1/my-app/src/designed_ui/submitDeleteMessages/functions.js"],"sourcesContent":["import {globalInfo} from '../global_Info.js';\r\nimport{APILogBuffer,fetchSubmissionResponses} from '../global_functions';\r\n\r\nfunction deleteAllPushSubmissions(){\r\n\r\n    //DELETE ALL SUBMISSIONS\r\n    function deleteSubmissionResponses(){\r\n    //forEach form submission response, delete the data\r\n    //after this has been run, it will be as if a new form was created (no data)\r\n\r\n        //forEach over all form responses (push notifcations)\r\n        for(var i = 0; i < globalInfo.submissionResponses.length; i++){\r\n\r\n            //via the id, for each response delete the response submission\r\n            window.JF.deleteSubmission(globalInfo.submissionResponses[i].id, function(response){\r\n                /**\r\n                 successful response including a text message\r\n                .\r\n                */\r\n            })\r\n        }\r\n    }\r\n\r\n    //execute delete script (ensure API ok and submissions fetched uptodate)\r\n    function executeDeleteSubmissionResponses(){\r\n\r\n        //when API has loaded (window.JF != ''), run the following scripts to execute the deletion of all form submissions\r\n        var whenAPILoaded = '';\r\n        whenAPILoaded = setInterval( () => {\r\n\r\n            if(window.JF != ''){\r\n                //fetch submission responses\r\n                fetchSubmissionResponses();\r\n\r\n                //when API has retieved submission responses, run delete submission responses function\r\n                var checkSubmissionsResponse = '';\r\n                checkSubmissionsResponse = setInterval ( () => {\r\n                    if(globalInfo.submissionResponses != '') {\r\n                        deleteSubmissionResponses() \r\n                        clearInterval(checkSubmissionsResponse);\r\n                    }\r\n                },100)\r\n            }\r\n\r\n            clearInterval(whenAPILoaded); //stop checking if API has loaded\r\n            APILogBuffer('all submissions have been deleted.'); //populate API status\r\n        },500);\r\n    }\r\n    executeDeleteSubmissionResponses();\r\n}\r\n\r\nexport{ deleteAllPushSubmissions }"],"mappings":"AAAA,OAAQA,UAAU,KAAO,mBAAmB,CAC5C,OAAOC,YAAY,CAACC,wBAAwB,KAAO,qBAAqB,CAExE,QAASC,yBAAwB,EAAE,CAE/B;AACA,QAASC,0BAAyB,EAAE,CACpC;AACA;AAEI;AACA,IAAI,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGL,UAAU,CAACM,mBAAmB,CAACC,MAAM,CAAEF,CAAC,EAAE,CAAC,CAE1D;AACAG,MAAM,CAACC,EAAE,CAACC,gBAAgB,CAACV,UAAU,CAACM,mBAAmB,CAACD,CAAC,CAAC,CAACM,EAAE,CAAE,SAASC,QAAQ,CAAC,CAC/E;AAChB;AACA;AACA,kBACY,CAAC,CAAC,CACN,CACJ,CAEA;AACA,QAASC,iCAAgC,EAAE,CAEvC;AACA,GAAIC,cAAa,CAAG,EAAE,CACtBA,aAAa,CAAGC,WAAW,CAAE,UAAM,CAE/B,GAAGP,MAAM,CAACC,EAAE,EAAI,EAAE,CAAC,CACf;AACAP,wBAAwB,EAAE,CAE1B;AACA,GAAIc,yBAAwB,CAAG,EAAE,CACjCA,wBAAwB,CAAGD,WAAW,CAAG,UAAM,CAC3C,GAAGf,UAAU,CAACM,mBAAmB,EAAI,EAAE,CAAE,CACrCF,yBAAyB,EAAE,CAC3Ba,aAAa,CAACD,wBAAwB,CAAC,CAC3C,CACJ,CAAC,CAAC,GAAG,CAAC,CACV,CAEAC,aAAa,CAACH,aAAa,CAAC,CAAE;AAC9Bb,YAAY,CAAC,oCAAoC,CAAC,CAAE;AACxD,CAAC,CAAC,GAAG,CAAC,CACV,CACAY,gCAAgC,EAAE,CACtC,CAEA,OAAQV,wBAAwB"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import{globalInfo}from'./global_Info.js';import{insertPush}from'./pushExample/functions';//takes a string and injects it into the API status after 2 seconds\nfunction APILogBuffer(log){debugger;//after 10s, return the string (log)\nsetTimeout(function(){console.log(globalInfo);globalInfo.APIStatus.innerHTML=log;},2000);}//fetch all submission data into an array from the API\nfunction fetchSubmissionResponses(){debugger;//console.log(globalInfo);\nwindow.JF.getFormSubmissions(globalInfo.formID,function(response){console.log('recieved form submission data');console.log('delete function responses ');console.log(response);//add all responses to globalInfo so accesible globally\nglobalInfo.submissionResponses=response;});console.log('submissions fetched');console.log(globalInfo);}//get form data function\nfunction getFormData(){debugger;console.log('getting form data');APILogBuffer('getting form data');//make request to API to recieve push notification\nwindow.JF.getFormSubmissions(globalInfo.formID,function(response){console.log('get form data response: ');console.log(response);debugger;console.log('recieved form submission data');APILogBuffer('recieved form submission data');//if there are form submissions, store the submissions in the applicable variables\nif(response.length>=1){console.log('get form data globalinfo ');console.log(globalInfo);console.log(response);globalInfo.submissionResponses=response;console.log('new submission response inserted:');console.log(globalInfo);//reverse submissionResponse so the latest push is always at the end of the array\nglobalInfo.submissionResponses.reverse();console.log('submission responses after reverse'+globalInfo.submissionResponses);}else{console.log('no responses recieved yet');APILogBuffer('no responses recieved yet');}});}//TODO: was upto line 67\n//trigger the setInterval to check for form push data\nvar checkForFormPushData='';function triggerFormPushDataSearch(){console.log('get triggerformpushdata globalinfo ');console.log(globalInfo);debugger;//check every second for a new post\ncheckForFormPushData=setInterval(function(){debugger;console.log('get form data function');getFormData();console.log('form data has been recieved. Logging gobal info');console.log(globalInfo);//if this is the first time push is being activated\nif(globalInfo.submissionResponseArrayIndex===false&&globalInfo.submissionResponses!=''){var pushResponse=globalInfo.submissionResponses[0].answers[globalInfo.responseAnswerNumber];console.log('the new submission is'+globalInfo.submissionResponses);//end push response to insertPush function, which will handle push response to screen\ninsertPush(pushResponse.answer);//store current response index, so eg submissionResponses[submissionResponseArrayIndex]\nglobalInfo.submissionResponseArrayIndex=0;//stop interval once push is up\nstopFormApi();globalInfo.lastSubmissionResponseLength=globalInfo.submissionResponses.length;}//else if this is not the first time the push has been activated\n//check if the submissionResponseArray has had another push added since last time, via submissionResponseArrayIndex\n//if so, send next push\nelse if(globalInfo.submissionResponseArrayIndex>=0&&/* submissionResponseArrayIndex <= submissionResponses.length &&*/globalInfo.submissionResponseArrayIndex<globalInfo.submissionResponses.length-1&&globalInfo.submissionResponses!=''){globalInfo.lastSubmissionResponseLength++;globalInfo.submissionResponseArrayIndex++;console.log('number of data in index is '+globalInfo.submissionResponseArrayIndex+' and data in actual array is'+globalInfo.submissionResponses.length);//pushResponse becomes the answer for the latest submission\nvar pushResponse=globalInfo.submissionResponses[globalInfo.submissionResponseArrayIndex].answers[globalInfo.responseAnswerNumber];//end push response to insertPush function, which will handle push response to screen\ninsertPush(pushResponse.answer);//stop interval once push is up\nstopFormApi();}},globalInfo.dataRefreshTime);}//stop searching for push data function\nfunction stopFormApi(){/* setTimeout( () => { */console.log('API has stopped');APILogBuffer('API has stopped');clearInterval(checkForFormPushData);/* },5000) */}export{APILogBuffer,fetchSubmissionResponses,triggerFormPushDataSearch,checkForFormPushData};/****************************************************** \r\n I THINK BELOW CAN BE DELETED \r\n ******************************************************/ // var jotformApiScript = document.querySelector('#jotform-api-script');\n// var jotformApiInit = document.querySelector('#jotform-api-init');\n// var body = document.querySelector('body')\n// var apiScriptSrc; //used to retrieve API URL prior to removing from DOM\n// //initialise the script\n// function initScript(API){\n//     API.initialize( {apiKey: \"f78958f78beefa5e3e88255e7559579b\"} ); \n//  }\n// //delete script tag with jotform API URL\n// function deletePreviousAPIScript(APIscript){\n//     apiScriptSrc = jotformApiScript.src\n//     body.removeChild(APIscript)\n// }\n// //reinject the jotform URL inside a new script tag\n// function reinjectAPIScript(APIScript){\n//     //debugger;\n//     APIScript = document.createElement('script'); //create new script\n//     APIScript.src = apiScriptSrc\n//     body.appendChild(APIScript) \n//     jotformApiScript = APIScript; //assign API script variable to be new script variable\n// }\n//TODO: FInalise below code in log usage info button \n// deletePreviousAPIScript(jotformApiScript);\n// reinjectAPIScript(jotformApiScript);\n//initScript(JF)\n// JF.getUsage((response) => console.log(response));","map":{"version":3,"names":["globalInfo","insertPush","APILogBuffer","log","setTimeout","console","APIStatus","innerHTML","fetchSubmissionResponses","window","JF","getFormSubmissions","formID","response","submissionResponses","getFormData","length","reverse","checkForFormPushData","triggerFormPushDataSearch","setInterval","submissionResponseArrayIndex","pushResponse","answers","responseAnswerNumber","answer","stopFormApi","lastSubmissionResponseLength","dataRefreshTime","clearInterval"],"sources":["C:/Users/Josh/Documents/Code/push-ui-v1/my-app/src/designed_ui/global_functions.js"],"sourcesContent":["import {globalInfo} from './global_Info.js';\r\nimport{insertPush} from './pushExample/functions';\r\n\r\n//takes a string and injects it into the API status after 2 seconds\r\nfunction APILogBuffer(log){\r\n    debugger;\r\n    //after 10s, return the string (log)\r\n    setTimeout( () => {\r\n        console.log(globalInfo);\r\n        globalInfo.APIStatus.innerHTML =  log;\r\n    },2000)\r\n}\r\n\r\n//fetch all submission data into an array from the API\r\nfunction fetchSubmissionResponses(){\r\n    debugger;\r\n    //console.log(globalInfo);\r\n    window.JF.getFormSubmissions(globalInfo.formID, function(response){\r\n        console.log('recieved form submission data')    \r\n        console.log('delete function responses ');\r\n        console.log(response);\r\n        //add all responses to globalInfo so accesible globally\r\n        globalInfo.submissionResponses = response;\r\n    })\r\n    console.log('submissions fetched');\r\n    console.log(globalInfo);\r\n}\r\n\r\n//get form data function\r\nfunction getFormData() {\r\n    debugger;\r\n    console.log('getting form data')\r\n    APILogBuffer('getting form data')\r\n    \r\n    //make request to API to recieve push notification\r\n    window.JF.getFormSubmissions(globalInfo.formID, function(response){\r\n\r\n        console.log('get form data response: ');\r\n        console.log(response);\r\n\r\n        debugger;\r\n        console.log('recieved form submission data')\r\n        APILogBuffer('recieved form submission data')\r\n        \r\n        //if there are form submissions, store the submissions in the applicable variables\r\n        if(response.length >= 1){\r\n            console.log('get form data globalinfo ');\r\n            console.log( globalInfo);\r\n            console.log(response)\r\n\r\n            globalInfo.submissionResponses = response;\r\n            console.log('new submission response inserted:')\r\n            console.log( globalInfo);\r\n            //reverse submissionResponse so the latest push is always at the end of the array\r\n            globalInfo.submissionResponses.reverse();  \r\n\r\n            console.log('submission responses after reverse' + globalInfo.submissionResponses);\r\n        }else{\r\n            console.log('no responses recieved yet')\r\n            APILogBuffer('no responses recieved yet')\r\n        }\r\n\r\n    })\r\n}\r\n\r\n//TODO: was upto line 67\r\n\r\n//trigger the setInterval to check for form push data\r\nvar checkForFormPushData = '';\r\nfunction triggerFormPushDataSearch(){\r\n    console.log('get triggerformpushdata globalinfo ');\r\n    console.log(globalInfo);\r\n    debugger;\r\n    //check every second for a new post\r\n    checkForFormPushData = setInterval( () => {\r\n        debugger;\r\n        console.log('get form data function');\r\n        getFormData();\r\n        console.log('form data has been recieved. Logging gobal info');\r\n        console.log(globalInfo);\r\n        //if this is the first time push is being activated\r\n        if(globalInfo.submissionResponseArrayIndex === false && globalInfo.submissionResponses != ''){\r\n            var pushResponse = globalInfo.submissionResponses[0].answers[globalInfo.responseAnswerNumber];\r\n            console.log('the new submission is' + globalInfo.submissionResponses)\r\n            //end push response to insertPush function, which will handle push response to screen\r\n            insertPush(pushResponse.answer)\r\n            //store current response index, so eg submissionResponses[submissionResponseArrayIndex]\r\n            globalInfo.submissionResponseArrayIndex = 0;\r\n  \r\n            //stop interval once push is up\r\n            stopFormApi()\r\n            \r\n            globalInfo.lastSubmissionResponseLength = globalInfo.submissionResponses.length;\r\n        }\r\n        //else if this is not the first time the push has been activated\r\n        //check if the submissionResponseArray has had another push added since last time, via submissionResponseArrayIndex\r\n        //if so, send next push\r\n        else if (globalInfo.submissionResponseArrayIndex >= 0 && /* submissionResponseArrayIndex <= submissionResponses.length &&*/ globalInfo.submissionResponseArrayIndex < globalInfo.submissionResponses.length-1 && globalInfo.submissionResponses != ''){\r\n            globalInfo.lastSubmissionResponseLength++;\r\n            globalInfo.submissionResponseArrayIndex++;\r\n            console.log('number of data in index is ' + globalInfo.submissionResponseArrayIndex + ' and data in actual array is' + globalInfo.submissionResponses.length)\r\n            \r\n            //pushResponse becomes the answer for the latest submission\r\n            var pushResponse = globalInfo.submissionResponses[globalInfo.submissionResponseArrayIndex].answers[globalInfo.responseAnswerNumber];\r\n\r\n                //end push response to insertPush function, which will handle push response to screen\r\n            insertPush(pushResponse.answer);\r\n\r\n            //stop interval once push is up\r\n            stopFormApi()\r\n        }\r\n\r\n    },globalInfo.dataRefreshTime)\r\n}\r\n\r\n//stop searching for push data function\r\nfunction stopFormApi(){\r\n\r\n    /* setTimeout( () => { */\r\n            console.log('API has stopped');\r\n            APILogBuffer('API has stopped');\r\n            clearInterval(checkForFormPushData);\r\n    /* },5000) */\r\n\r\n    }\r\n\r\n\r\n\r\n\r\nexport {APILogBuffer,fetchSubmissionResponses,triggerFormPushDataSearch,checkForFormPushData}\r\n\r\n\r\n\r\n/****************************************************** \r\n I THINK BELOW CAN BE DELETED \r\n ******************************************************/\r\n\r\n\r\n\r\n// var jotformApiScript = document.querySelector('#jotform-api-script');\r\n// var jotformApiInit = document.querySelector('#jotform-api-init');\r\n\r\n\r\n// var body = document.querySelector('body')\r\n// var apiScriptSrc; //used to retrieve API URL prior to removing from DOM\r\n\r\n\r\n// //initialise the script\r\n// function initScript(API){\r\n//     API.initialize( {apiKey: \"f78958f78beefa5e3e88255e7559579b\"} ); \r\n//  }\r\n\r\n\r\n\r\n\r\n\r\n// //delete script tag with jotform API URL\r\n// function deletePreviousAPIScript(APIscript){\r\n//     apiScriptSrc = jotformApiScript.src\r\n//     body.removeChild(APIscript)\r\n// }\r\n\r\n// //reinject the jotform URL inside a new script tag\r\n// function reinjectAPIScript(APIScript){\r\n//     //debugger;\r\n//     APIScript = document.createElement('script'); //create new script\r\n//     APIScript.src = apiScriptSrc\r\n//     body.appendChild(APIScript) \r\n\r\n//     jotformApiScript = APIScript; //assign API script variable to be new script variable\r\n// }\r\n\r\n\r\n\r\n //TODO: FInalise below code in log usage info button \r\n\r\n// deletePreviousAPIScript(jotformApiScript);\r\n\r\n// reinjectAPIScript(jotformApiScript);\r\n \r\n //initScript(JF)\r\n\r\n// JF.getUsage((response) => console.log(response));"],"mappings":"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"},"metadata":{},"sourceType":"module"}
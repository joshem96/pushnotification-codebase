{"ast":null,"code":"import { globalInfo } from '../global_Info.js';\nimport { APILogBuffer, fetchSubmissionResponses } from '../global_functions';\nfunction deleteAllPushSubmissions() {\n  //DELETE ALL SUBMISSIONS\n  function deleteSubmissionResponses() {\n    //forEach form submission response, delete the data\n    //after this has been run, it will be as if a new form was created (no data)\n\n    //forEach over all form responses (push notifcations)\n    for (var i = 0; i < globalInfo.submissionResponses.length; i++) {\n      //via the id, for each response delete the response submission\n      window.JF.deleteSubmission(globalInfo.submissionResponses[i].id, function (response) {\n        /**\r\n         successful response including a text message\r\n        .\r\n        */\n      });\n    }\n  }\n\n  //execute delete script (ensure API ok and submissions fetched uptodate)\n  function executeDeleteSubmissionResponses() {\n    //when API has loaded (window.JF != ''), run the following scripts to execute the deletion of all form submissions\n    var whenAPILoaded = '';\n    whenAPILoaded = setInterval(() => {\n      if (window.JF != '') {\n        //fetch submission responses\n        fetchSubmissionResponses();\n\n        //when API has retieved submission responses, run delete submission responses function\n        var checkSubmissionsResponse = '';\n        checkSubmissionsResponse = setInterval(() => {\n          if (globalInfo.submissionResponses != '') {\n            deleteSubmissionResponses();\n            clearInterval(checkSubmissionsResponse);\n          }\n        }, 100);\n      }\n      clearInterval(whenAPILoaded); //stop checking if API has loaded\n      APILogBuffer('all submissions have been deleted.'); //populate API status\n    }, 500);\n  }\n  executeDeleteSubmissionResponses();\n}\nexport { deleteAllPushSubmissions };","map":{"version":3,"names":["globalInfo","APILogBuffer","fetchSubmissionResponses","deleteAllPushSubmissions","deleteSubmissionResponses","i","submissionResponses","length","window","JF","deleteSubmission","id","response","executeDeleteSubmissionResponses","whenAPILoaded","setInterval","checkSubmissionsResponse","clearInterval"],"sources":["C:/Users/Josh/Documents/Code/push-ui-v1/my-app/src/designed_ui/submitDeleteMessages/functions.js"],"sourcesContent":["import {globalInfo} from '../global_Info.js';\r\nimport{APILogBuffer,fetchSubmissionResponses} from '../global_functions';\r\n\r\nfunction deleteAllPushSubmissions(){\r\n\r\n    //DELETE ALL SUBMISSIONS\r\n    function deleteSubmissionResponses(){\r\n    //forEach form submission response, delete the data\r\n    //after this has been run, it will be as if a new form was created (no data)\r\n\r\n        //forEach over all form responses (push notifcations)\r\n        for(var i = 0; i < globalInfo.submissionResponses.length; i++){\r\n\r\n            //via the id, for each response delete the response submission\r\n            window.JF.deleteSubmission(globalInfo.submissionResponses[i].id, function(response){\r\n                /**\r\n                 successful response including a text message\r\n                .\r\n                */\r\n            })\r\n        }\r\n    }\r\n\r\n    //execute delete script (ensure API ok and submissions fetched uptodate)\r\n    function executeDeleteSubmissionResponses(){\r\n\r\n        //when API has loaded (window.JF != ''), run the following scripts to execute the deletion of all form submissions\r\n        var whenAPILoaded = '';\r\n        whenAPILoaded = setInterval( () => {\r\n\r\n            if(window.JF != ''){\r\n                //fetch submission responses\r\n                fetchSubmissionResponses();\r\n\r\n                //when API has retieved submission responses, run delete submission responses function\r\n                var checkSubmissionsResponse = '';\r\n                checkSubmissionsResponse = setInterval ( () => {\r\n                    if(globalInfo.submissionResponses != '') {\r\n                        deleteSubmissionResponses() \r\n                        clearInterval(checkSubmissionsResponse);\r\n                    }\r\n                },100)\r\n            }\r\n\r\n            clearInterval(whenAPILoaded); //stop checking if API has loaded\r\n            APILogBuffer('all submissions have been deleted.'); //populate API status\r\n        },500);\r\n    }\r\n    executeDeleteSubmissionResponses();\r\n}\r\n\r\nexport{ deleteAllPushSubmissions }"],"mappings":"AAAA,SAAQA,UAAU,QAAO,mBAAmB;AAC5C,SAAOC,YAAY,EAACC,wBAAwB,QAAO,qBAAqB;AAExE,SAASC,wBAAwB,GAAE;EAE/B;EACA,SAASC,yBAAyB,GAAE;IACpC;IACA;;IAEI;IACA,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACM,mBAAmB,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAC;MAE1D;MACAG,MAAM,CAACC,EAAE,CAACC,gBAAgB,CAACV,UAAU,CAACM,mBAAmB,CAACD,CAAC,CAAC,CAACM,EAAE,EAAE,UAASC,QAAQ,EAAC;QAC/E;AAChB;AACA;AACA;MACY,CAAC,CAAC;IACN;EACJ;;EAEA;EACA,SAASC,gCAAgC,GAAE;IAEvC;IACA,IAAIC,aAAa,GAAG,EAAE;IACtBA,aAAa,GAAGC,WAAW,CAAE,MAAM;MAE/B,IAAGP,MAAM,CAACC,EAAE,IAAI,EAAE,EAAC;QACf;QACAP,wBAAwB,EAAE;;QAE1B;QACA,IAAIc,wBAAwB,GAAG,EAAE;QACjCA,wBAAwB,GAAGD,WAAW,CAAG,MAAM;UAC3C,IAAGf,UAAU,CAACM,mBAAmB,IAAI,EAAE,EAAE;YACrCF,yBAAyB,EAAE;YAC3Ba,aAAa,CAACD,wBAAwB,CAAC;UAC3C;QACJ,CAAC,EAAC,GAAG,CAAC;MACV;MAEAC,aAAa,CAACH,aAAa,CAAC,CAAC,CAAC;MAC9Bb,YAAY,CAAC,oCAAoC,CAAC,CAAC,CAAC;IACxD,CAAC,EAAC,GAAG,CAAC;EACV;EACAY,gCAAgC,EAAE;AACtC;AAEA,SAAQV,wBAAwB"},"metadata":{},"sourceType":"module"}